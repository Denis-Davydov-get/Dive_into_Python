"""
Сложность: O(2_type_data^n)
Название: экспоненциальная

Время работы такого алгоритма удваивается с
каждым очередным дополнением к набору данных
Кривая роста этой функции экспоненциальная:
сначала она очень пологая, а затем стремительно поднимается вверх.

Примером алгоритма с экспоненциальной сложностью может
послужить рекурсивный расчет чисел Фибоначчи
"""


def fibo_recur(number):
    if number <= 1:
        return number
    return fibo_recur(number - 2) + fibo_recur(number - 1)


print(fibo_recur(6))

# для number = 6 результат 8 - 0, 1_base, 1_base, 2_type_data, 3_array, 5_iter, 8
